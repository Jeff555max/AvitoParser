
import telebot
from telebot import types
import subprocess
import os
import sqlite3
from dotenv import load_dotenv
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]
PAGE_SIZE = int(os.getenv("PAGE_SIZE", 5))

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

DB_PATH = os.environ.get("DB_PATH", "/db/results.db") if os.environ.get("DOCKER") else "results.db"

# --- –ú–µ–Ω—é ---
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä"))
    markup.add(types.KeyboardButton("üìã –ñ—É—Ä–Ω–∞–ª"), types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    return markup

def journal_menu(page=0, total=0):
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    if page > 0:
        buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"journal:{page-1}"))
    if (page+1)*PAGE_SIZE < total:
        buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"journal:{page+1}"))
    if buttons:
        markup.row(*buttons)
    return markup

# --- –ö–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=['start', 'menu'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text == "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä")
def run_parser(message):
    bot.send_message(message.chat.id, "–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    # –ó–∞–ø—É—Å–∫ main.py –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    try:
        result = subprocess.run(["python", "main.py"], capture_output=True, text=True, timeout=600)
        if result.returncode == 0:
            bot.send_message(message.chat.id, "–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:\n{result.stderr}")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")

@bot.message_handler(func=lambda m: m.text == "üìã –ñ—É—Ä–Ω–∞–ª")
def show_journal(message):
    page = 0
    posts, total = get_posts_page(page)
    text = render_posts(posts, page, total)
    bot.send_message(message.chat.id, text, reply_markup=journal_menu(page, total), parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith("journal:"))
def paginate_journal(call):
    page = int(call.data.split(":")[1])
    posts, total = get_posts_page(page)
    text = render_posts(posts, page, total)
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=journal_menu(page, total), parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def settings_menu(message):
    bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.")

# --- –ñ—É—Ä–Ω–∞–ª ---
def get_posts_page(page):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT title, price, address, link FROM objects ORDER BY id DESC LIMIT ? OFFSET ?", (PAGE_SIZE, page*PAGE_SIZE))
    rows = c.fetchall()
    c.execute("SELECT COUNT(*) FROM objects")
    total = c.fetchone()[0]
    conn.close()
    return rows, total

def render_posts(posts, page, total):
    if not posts:
        return "–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ."
    text = f"<b>–ñ—É—Ä–Ω–∞–ª –æ–±—ä–µ–∫—Ç–æ–≤ (—Å—Ç—Ä. {page+1})</b>\n\n"
    for idx, (title, price, address, link) in enumerate(posts, 1):
        text += f"<b>{title}</b>\n–¶–µ–Ω–∞: {price}\n–ê–¥—Ä–µ—Å: {address}\n<a href=\"{link}\">–°—Å—ã–ª–∫–∞</a>\n\n"
    text += f"–ü–æ–∫–∞–∑–∞–Ω–æ {min((page+1)*PAGE_SIZE, total)} –∏–∑ {total} –æ–±—ä–µ–∫—Ç–æ–≤."
    return text

if __name__ == "__main__":
    bot.polling(none_stop=True)
